#!/bin/bash

find_groups_id() {
  local group_name=$1
  local tmp_file=/tmp/${group_name}_$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1).json
  local groups_id=""
  local i

  local http_code=$(curl -s -w '%{http_code}' -o ${tmp_file} --header "PRIVATE-TOKEN: ${GIT_TOKEN}" ${GIT_URL}/api/v4/groups?search=${group_name})
  if [[ "${http_code}" -ne 200 ]]; then
    echo "Unable to reach gitlab API - http error code: ${http_code}"
    return 1
  elif [[ $(grep "\"message\"" ${tmp_file} | wc -l) -ne 0 ]]; then
    echo "Unable to get gitlab groups id - error message: $(cat ${tmp_file} | jq .message | args)"
    return 1
  fi

  local group_count=$(cat ${tmp_file} | jq length)
  if [[ ${group_count} -eq 0 ]]; then
    echo "No group found with name ${group_name}. Please check your permission."
    return 1
  fi

  for ((i = 0; i < ${group_count};i++)) {
    local group_name_found=$(cat ${tmp_file} | jq .[${i}].name | xargs)
    local group_id_found=$(cat ${tmp_file} | jq .[${i}].id | xargs)
    if [[ "${group_name_found}" == "${group_name}" ]]; then
      groups_id="${groups_id} ${group_id_found}"
    fi
  }

  echo ${tmp_file} > /tmp/toto
  #rm ${tmp_file}
  echo ${groups_id}
  return 0
}

clone_group() {
  local group_id=$1
  local tmp_file=/tmp/${group_id}_$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1).json
  local i

  local http_code=$(curl -s -w '%{http_code}' --header "PRIVATE-TOKEN: ${GIT_TOKEN}" ${GIT_URL}/api/v4/groups/${group_id}/projects?per_page=100 -o ${tmp_file})
  if [[ "${http_code}" -ne 200 ]]; then
    echo "Unable to reach gitlab API - http error code: ${http_code}"
    return 1
  elif [[ $(grep "\"message\"" ${tmp_file} | wc -l) -ne 0 ]]; then
    echo "Unable to get gitlab groups id - error message: $(cat ${tmp_file} | jq .message | args)"
    return 1
  fi

  local project_count=$(cat ${tmp_file} | jq length)
  if [[ ${project_count} -eq 0 ]]; then
    echo "No project found in this group"
    return 1
  fi

  for ((i = 0; i < ${project_count};i++)) {
    local project_name=$(cat ${tmp_file} | jq .[${i}].name | xargs)
    local project_ssh_url=$(cat ${tmp_file} | jq .[${i}].ssh_url_to_repo | xargs)
    echo "Cloning project ${project_name} ..."
    git clone -q ${project_ssh_url} > /dev/null 2>&1
  }

  #rm ${tmp_file}
}

usage() {
  echo "Usage: git_clone_group <group_name>"
}

main() {
  if ! which jq > /dev/null; then
    echo "jq binary should be installed"
    exit 1
  fi

  if [[ -z "${GIT_URL}" ]]; then
    echo "Env variable GIT_URL not defined"
    exit 1
  fi

  if [[ -z "${GIT_TOKEN}" ]]; then
    echo "Env variable GIT_TOKEN not defined"
    exit 1
  fi

  if [[ -z "$1" ]]; then
    usage
    exit 1
  fi

  echo "Finding groups id with name $1..."
  groups_id=$(find_groups_id $1)
  if [[ $? -eq 0 ]]; then
    echo "Groups id found with name $1: ${groups_id}"

    for group in "${groups_id}"; do
      clone_group $group
    done
  else
    echo $groups_id
  fi
}
main $@
